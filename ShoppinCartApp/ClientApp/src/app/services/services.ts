/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.1.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class services {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @param input_Id (optional) 
   * @param input_FKRoleId (optional) 
   * @param input_Username (optional) 
   * @param input_Password (optional) 
   * @param input_EmailId (optional) 
   * @param input_Address (optional) 
   * @param input_IPAddress (optional) 
   * @param input_IsActive (optional) 
   * @param input_RememberMe (optional) 
   * @param body (optional) 
   * @return Success
   */
  login(input_Id: string | undefined, input_FKRoleId: number | undefined, input_Username: string | undefined, input_Password: string | undefined, input_EmailId: string | undefined, input_Address: string | undefined, input_IPAddress: string | undefined, input_IsActive: boolean | undefined, input_RememberMe: boolean | undefined, body: RegisterUserDTO | undefined): Observable<LoginSucessDTO> {
    let url_ = this.baseUrl + "/api/AuthenticationAPI/Login?";
    if (input_Id === null)
      throw new Error("The parameter 'input_Id' cannot be null.");
    else if (input_Id !== undefined)
      url_ += "Input.Id=" + encodeURIComponent("" + input_Id) + "&";
    if (input_FKRoleId === null)
      throw new Error("The parameter 'input_FKRoleId' cannot be null.");
    else if (input_FKRoleId !== undefined)
      url_ += "Input.FKRoleId=" + encodeURIComponent("" + input_FKRoleId) + "&";
    if (input_Username === null)
      throw new Error("The parameter 'input_Username' cannot be null.");
    else if (input_Username !== undefined)
      url_ += "Input.Username=" + encodeURIComponent("" + input_Username) + "&";
    if (input_Password === null)
      throw new Error("The parameter 'input_Password' cannot be null.");
    else if (input_Password !== undefined)
      url_ += "Input.Password=" + encodeURIComponent("" + input_Password) + "&";
    if (input_EmailId === null)
      throw new Error("The parameter 'input_EmailId' cannot be null.");
    else if (input_EmailId !== undefined)
      url_ += "Input.EmailId=" + encodeURIComponent("" + input_EmailId) + "&";
    if (input_Address === null)
      throw new Error("The parameter 'input_Address' cannot be null.");
    else if (input_Address !== undefined)
      url_ += "Input.Address=" + encodeURIComponent("" + input_Address) + "&";
    if (input_IPAddress === null)
      throw new Error("The parameter 'input_IPAddress' cannot be null.");
    else if (input_IPAddress !== undefined)
      url_ += "Input.IPAddress=" + encodeURIComponent("" + input_IPAddress) + "&";
    if (input_IsActive === null)
      throw new Error("The parameter 'input_IsActive' cannot be null.");
    else if (input_IsActive !== undefined)
      url_ += "Input.IsActive=" + encodeURIComponent("" + input_IsActive) + "&";
    if (input_RememberMe === null)
      throw new Error("The parameter 'input_RememberMe' cannot be null.");
    else if (input_RememberMe !== undefined)
      url_ += "Input.RememberMe=" + encodeURIComponent("" + input_RememberMe) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processLogin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogin(<any>response_);
        } catch (e) {
          return <Observable<LoginSucessDTO>><any>_observableThrow(e);
        }
      } else
        return <Observable<LoginSucessDTO>><any>_observableThrow(response_);
    }));
  }

  protected processLogin(response: HttpResponseBase): Observable<LoginSucessDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LoginSucessDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<LoginSucessDTO>(<any>null);
  }

  /**
   * @param returnUrl (optional) 
   * @param input_Id (optional) 
   * @param input_FKRoleId (optional) 
   * @param input_Username (optional) 
   * @param input_Password (optional) 
   * @param input_EmailId (optional) 
   * @param input_Address (optional) 
   * @param input_IPAddress (optional) 
   * @param input_IsActive (optional) 
   * @param input_RememberMe (optional) 
   * @param body (optional) 
   * @return Success
   */
  cognitoLogin(returnUrl: string | undefined, input_Id: string | undefined, input_FKRoleId: number | undefined, input_Username: string | undefined, input_Password: string | undefined, input_EmailId: string | undefined, input_Address: string | undefined, input_IPAddress: string | undefined, input_IsActive: boolean | undefined, input_RememberMe: boolean | undefined, body: RegisterUserDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AuthenticationAPI/CognitoLogin?";
    if (returnUrl === null)
      throw new Error("The parameter 'returnUrl' cannot be null.");
    else if (returnUrl !== undefined)
      url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&";
    if (input_Id === null)
      throw new Error("The parameter 'input_Id' cannot be null.");
    else if (input_Id !== undefined)
      url_ += "Input.Id=" + encodeURIComponent("" + input_Id) + "&";
    if (input_FKRoleId === null)
      throw new Error("The parameter 'input_FKRoleId' cannot be null.");
    else if (input_FKRoleId !== undefined)
      url_ += "Input.FKRoleId=" + encodeURIComponent("" + input_FKRoleId) + "&";
    if (input_Username === null)
      throw new Error("The parameter 'input_Username' cannot be null.");
    else if (input_Username !== undefined)
      url_ += "Input.Username=" + encodeURIComponent("" + input_Username) + "&";
    if (input_Password === null)
      throw new Error("The parameter 'input_Password' cannot be null.");
    else if (input_Password !== undefined)
      url_ += "Input.Password=" + encodeURIComponent("" + input_Password) + "&";
    if (input_EmailId === null)
      throw new Error("The parameter 'input_EmailId' cannot be null.");
    else if (input_EmailId !== undefined)
      url_ += "Input.EmailId=" + encodeURIComponent("" + input_EmailId) + "&";
    if (input_Address === null)
      throw new Error("The parameter 'input_Address' cannot be null.");
    else if (input_Address !== undefined)
      url_ += "Input.Address=" + encodeURIComponent("" + input_Address) + "&";
    if (input_IPAddress === null)
      throw new Error("The parameter 'input_IPAddress' cannot be null.");
    else if (input_IPAddress !== undefined)
      url_ += "Input.IPAddress=" + encodeURIComponent("" + input_IPAddress) + "&";
    if (input_IsActive === null)
      throw new Error("The parameter 'input_IsActive' cannot be null.");
    else if (input_IsActive !== undefined)
      url_ += "Input.IsActive=" + encodeURIComponent("" + input_IsActive) + "&";
    if (input_RememberMe === null)
      throw new Error("The parameter 'input_RememberMe' cannot be null.");
    else if (input_RememberMe !== undefined)
      url_ += "Input.RememberMe=" + encodeURIComponent("" + input_RememberMe) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processCognitoLogin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCognitoLogin(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processCognitoLogin(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  /**
   * @return Success
   */
  getactiveroles(): Observable<RoleDTO[]> {
    let url_ = this.baseUrl + "/api/RolesAPI/getactiveroles";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetactiveroles(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetactiveroles(<any>response_);
        } catch (e) {
          return <Observable<RoleDTO[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<RoleDTO[]>><any>_observableThrow(response_);
    }));
  }

  protected processGetactiveroles(response: HttpResponseBase): Observable<RoleDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(RoleDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RoleDTO[]>(<any>null);
  }

  /**
   * @return Success
   */
  rolesAPIAll(): Observable<RoleDTO[]> {
    let url_ = this.baseUrl + "/api/RolesAPI";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRolesAPIAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRolesAPIAll(<any>response_);
        } catch (e) {
          return <Observable<RoleDTO[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<RoleDTO[]>><any>_observableThrow(response_);
    }));
  }

  protected processRolesAPIAll(response: HttpResponseBase): Observable<RoleDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(RoleDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RoleDTO[]>(<any>null);
  }

  /**
   * @return Success
   */
  rolesAPIGET(id: string): Observable<RoleDTO> {
    let url_ = this.baseUrl + "/api/RolesAPI/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRolesAPIGET(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRolesAPIGET(<any>response_);
        } catch (e) {
          return <Observable<RoleDTO>><any>_observableThrow(e);
        }
      } else
        return <Observable<RoleDTO>><any>_observableThrow(response_);
    }));
  }

  protected processRolesAPIGET(response: HttpResponseBase): Observable<RoleDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoleDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<RoleDTO>(<any>null);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  rolesAPIPOST(userid: string, body: AddRoleDTO | undefined): Observable<AddRoleDTO> {
    let url_ = this.baseUrl + "/api/RolesAPI/{userid}";
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRolesAPIPOST(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRolesAPIPOST(<any>response_);
        } catch (e) {
          return <Observable<AddRoleDTO>><any>_observableThrow(e);
        }
      } else
        return <Observable<AddRoleDTO>><any>_observableThrow(response_);
    }));
  }

  protected processRolesAPIPOST(response: HttpResponseBase): Observable<AddRoleDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AddRoleDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AddRoleDTO>(<any>null);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  rolesAPIPUT(entityid: string, userid: string, isdelete: boolean, body: UpdateRoleDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/RolesAPI/{entityid}/{userid}/{isdelete}";
    if (entityid === undefined || entityid === null)
      throw new Error("The parameter 'entityid' must be defined.");
    url_ = url_.replace("{entityid}", encodeURIComponent("" + entityid));
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    if (isdelete === undefined || isdelete === null)
      throw new Error("The parameter 'isdelete' must be defined.");
    url_ = url_.replace("{isdelete}", encodeURIComponent("" + isdelete));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRolesAPIPUT(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRolesAPIPUT(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processRolesAPIPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  /**
   * @return Success
   */
  rolesAPIDELETE(entityid: string, userid: string): Observable<string> {
    let url_ = this.baseUrl + "/api/RolesAPI/{entityid}/{userid}";
    if (entityid === undefined || entityid === null)
      throw new Error("The parameter 'entityid' must be defined.");
    url_ = url_.replace("{entityid}", encodeURIComponent("" + entityid));
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRolesAPIDELETE(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRolesAPIDELETE(<any>response_);
        } catch (e) {
          return <Observable<string>><any>_observableThrow(e);
        }
      } else
        return <Observable<string>><any>_observableThrow(response_);
    }));
  }

  protected processRolesAPIDELETE(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<string>(<any>null);
  }

  /**
   * @return Success
   */
  getactiveusers(): Observable<UserDTO[]> {
    let url_ = this.baseUrl + "/api/UsersAPI/getactiveusers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetactiveusers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetactiveusers(<any>response_);
        } catch (e) {
          return <Observable<UserDTO[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserDTO[]>><any>_observableThrow(response_);
    }));
  }

  protected processGetactiveusers(response: HttpResponseBase): Observable<UserDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserDTO[]>(<any>null);
  }

  /**
   * @return Success
   */
  usersAPIAll(): Observable<UserDTO[]> {
    let url_ = this.baseUrl + "/api/UsersAPI";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUsersAPIAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsersAPIAll(<any>response_);
        } catch (e) {
          return <Observable<UserDTO[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserDTO[]>><any>_observableThrow(response_);
    }));
  }

  protected processUsersAPIAll(response: HttpResponseBase): Observable<UserDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserDTO[]>(<any>null);
  }

  /**
   * @return Success
   */
  usersAPIGET(id: string): Observable<UserDTO> {
    let url_ = this.baseUrl + "/api/UsersAPI/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUsersAPIGET(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsersAPIGET(<any>response_);
        } catch (e) {
          return <Observable<UserDTO>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserDTO>><any>_observableThrow(response_);
    }));
  }

  protected processUsersAPIGET(response: HttpResponseBase): Observable<UserDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserDTO>(<any>null);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  usersAPIPOST(userid: string, body: AddUserDTO | undefined): Observable<AddUserDTO> {
    let url_ = this.baseUrl + "/api/UsersAPI/{userid}";
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUsersAPIPOST(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsersAPIPOST(<any>response_);
        } catch (e) {
          return <Observable<AddUserDTO>><any>_observableThrow(e);
        }
      } else
        return <Observable<AddUserDTO>><any>_observableThrow(response_);
    }));
  }

  protected processUsersAPIPOST(response: HttpResponseBase): Observable<AddUserDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AddUserDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AddUserDTO>(<any>null);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  usersAPIPUT(entityid: string, userid: string, isdelete: boolean, body: UpdateUserDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/UsersAPI/{entityid}/{userid}/{isdelete}";
    if (entityid === undefined || entityid === null)
      throw new Error("The parameter 'entityid' must be defined.");
    url_ = url_.replace("{entityid}", encodeURIComponent("" + entityid));
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    if (isdelete === undefined || isdelete === null)
      throw new Error("The parameter 'isdelete' must be defined.");
    url_ = url_.replace("{isdelete}", encodeURIComponent("" + isdelete));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUsersAPIPUT(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsersAPIPUT(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processUsersAPIPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  /**
   * @return Success
   */
  usersAPIDELETE(entityid: string, userid: string): Observable<string> {
    let url_ = this.baseUrl + "/api/UsersAPI/{entityid}/{userid}";
    if (entityid === undefined || entityid === null)
      throw new Error("The parameter 'entityid' must be defined.");
    url_ = url_.replace("{entityid}", encodeURIComponent("" + entityid));
    if (userid === undefined || userid === null)
      throw new Error("The parameter 'userid' must be defined.");
    url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUsersAPIDELETE(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUsersAPIDELETE(<any>response_);
        } catch (e) {
          return <Observable<string>><any>_observableThrow(e);
        }
      } else
        return <Observable<string>><any>_observableThrow(response_);
    }));
  }

  protected processUsersAPIDELETE(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<string>(<any>null);
  }

  /**
   * @return Success
   */
  weatherForecast(): Observable<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processWeatherForecast(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processWeatherForecast(<any>response_);
        } catch (e) {
          return <Observable<WeatherForecast[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
    }));
  }

  protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<WeatherForecast[]>(<any>null);
  }
}

export class AddRoleDTO implements IAddRoleDTO {
  id?: string | undefined;
  isActive!: boolean;
  roleName!: string;

  constructor(data?: IAddRoleDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.roleName = _data["roleName"];
    }
  }

  static fromJS(data: any): AddRoleDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddRoleDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["roleName"] = this.roleName;
    return data;
  }
}

export interface IAddRoleDTO {
  id?: string | undefined;
  isActive: boolean;
  roleName: string;
}

export class AddUserDTO implements IAddUserDTO {
  id?: string | undefined;
  isActive!: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;

  constructor(data?: IAddUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.emailId = _data["emailId"];
      this.phoneNo = _data["phoneNo"];
      this.address = _data["address"];
    }
  }

  static fromJS(data: any): AddUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["username"] = this.username;
    data["password"] = this.password;
    data["emailId"] = this.emailId;
    data["phoneNo"] = this.phoneNo;
    data["address"] = this.address;
    return data;
  }
}

export interface IAddUserDTO {
  id?: string | undefined;
  isActive: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;
}

export class LoginSucessDTO implements ILoginSucessDTO {
  token?: string | undefined;
  tokenExpiration?: Date;

  constructor(data?: ILoginSucessDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
      this.tokenExpiration = _data["tokenExpiration"] ? new Date(_data["tokenExpiration"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): LoginSucessDTO {
    data = typeof data === 'object' ? data : {};
    let result = new LoginSucessDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token;
    data["tokenExpiration"] = this.tokenExpiration ? this.tokenExpiration.toISOString() : <any>undefined;
    return data;
  }
}

export interface ILoginSucessDTO {
  token?: string | undefined;
  tokenExpiration?: Date;
}

export class RegisterUserDTO implements IRegisterUserDTO {
  id?: string | undefined;
  fkRoleId?: number;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  address?: string | undefined;
  ipAddress?: string | undefined;
  isActive?: boolean;
  rememberMe?: boolean;

  constructor(data?: IRegisterUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.fkRoleId = _data["fkRoleId"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.emailId = _data["emailId"];
      this.address = _data["address"];
      this.ipAddress = _data["ipAddress"];
      this.isActive = _data["isActive"];
      this.rememberMe = _data["rememberMe"];
    }
  }

  static fromJS(data: any): RegisterUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["fkRoleId"] = this.fkRoleId;
    data["username"] = this.username;
    data["password"] = this.password;
    data["emailId"] = this.emailId;
    data["address"] = this.address;
    data["ipAddress"] = this.ipAddress;
    data["isActive"] = this.isActive;
    data["rememberMe"] = this.rememberMe;
    return data;
  }
}

export interface IRegisterUserDTO {
  id?: string | undefined;
  fkRoleId?: number;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  address?: string | undefined;
  ipAddress?: string | undefined;
  isActive?: boolean;
  rememberMe?: boolean;
}

export class RoleDTO implements IRoleDTO {
  id?: string | undefined;
  isActive?: boolean;
  isDelete?: boolean;
  roleName?: string | undefined;

  constructor(data?: IRoleDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.isDelete = _data["isDelete"];
      this.roleName = _data["roleName"];
    }
  }

  static fromJS(data: any): RoleDTO {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["isDelete"] = this.isDelete;
    data["roleName"] = this.roleName;
    return data;
  }
}

export interface IRoleDTO {
  id?: string | undefined;
  isActive?: boolean;
  isDelete?: boolean;
  roleName?: string | undefined;
}

export class UpdateRoleDTO implements IUpdateRoleDTO {
  id!: string;
  isActive!: boolean;
  isDelete?: boolean;
  roleName!: string;

  constructor(data?: IUpdateRoleDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.isDelete = _data["isDelete"];
      this.roleName = _data["roleName"];
    }
  }

  static fromJS(data: any): UpdateRoleDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateRoleDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["isDelete"] = this.isDelete;
    data["roleName"] = this.roleName;
    return data;
  }
}

export interface IUpdateRoleDTO {
  id: string;
  isActive: boolean;
  isDelete?: boolean;
  roleName: string;
}

export class UpdateUserDTO implements IUpdateUserDTO {
  id!: string;
  isActive!: boolean;
  isDelete?: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;

  constructor(data?: IUpdateUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.isDelete = _data["isDelete"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.emailId = _data["emailId"];
      this.phoneNo = _data["phoneNo"];
      this.address = _data["address"];
    }
  }

  static fromJS(data: any): UpdateUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["isDelete"] = this.isDelete;
    data["username"] = this.username;
    data["password"] = this.password;
    data["emailId"] = this.emailId;
    data["phoneNo"] = this.phoneNo;
    data["address"] = this.address;
    return data;
  }
}

export interface IUpdateUserDTO {
  id: string;
  isActive: boolean;
  isDelete?: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;
}

export class UserDTO implements IUserDTO {
  id?: string | undefined;
  isActive?: boolean;
  isDelete?: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;

  constructor(data?: IUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isActive = _data["isActive"];
      this.isDelete = _data["isDelete"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.emailId = _data["emailId"];
      this.phoneNo = _data["phoneNo"];
      this.address = _data["address"];
    }
  }

  static fromJS(data: any): UserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isActive"] = this.isActive;
    data["isDelete"] = this.isDelete;
    data["username"] = this.username;
    data["password"] = this.password;
    data["emailId"] = this.emailId;
    data["phoneNo"] = this.phoneNo;
    data["address"] = this.address;
    return data;
  }
}

export interface IUserDTO {
  id?: string | undefined;
  isActive?: boolean;
  isDelete?: boolean;
  username?: string | undefined;
  password?: string | undefined;
  emailId?: string | undefined;
  phoneNo?: string | undefined;
  address?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      (<any>this).temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === 'object' ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
